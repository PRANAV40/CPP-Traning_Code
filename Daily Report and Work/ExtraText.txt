    sender_email_id = 'parkardigital95@gmail.com'
    password = 'qofhykhhcxvuxllu'
    receiver_email_id = input("Enter the receiver mail ID here: ")
    names = input("Enter the receiver name: ")
    subject = "File of BSE API Data"
    body = f"Dear {names}, \n \t I have sent you an excel file of BSE API data. " \
            f"\n\nThanks and Regards \nParkar Digital \n5th Floor, C-Wing, Manikchand Ikon,\nBund Garden," \
            f"Dhole Patil Road,\nPune Maharashtra, 411001."
    attachment_filename = 'log_data_file.xlsx'
    send_email(sender_email_id, password, receiver_email_id, names, subject, body, attachment_filename)
	
	
	
	
	
	
	
# For import the csv file, make a log file and export the data into excel file

import pandas as pd

from bsedata.bse import BSE

import logging

from bsedata.exceptions import InvalidStockException

# For connecting the database

from database import connect_to_database

# For sending the file using e-mail ids

from mail import send_email

# Function for checking stock_code

def get_stock_code(company_name, stock_data):

  for code, name in stock_data.items():

    if name == company_name:

      return code

  return None

# Function for checking current price of stock

def get_current_price(stock_code, bse):

  try:

    stock_info = bse.getQuote(stock_code)

    current_price = stock_info['currentValue']

    high_price = stock_info['dayHigh']

    low_price = stock_info['dayLow']

    return current_price, high_price, low_price

  except InvalidStockException:

    return None, None, None

# Function for generating profit and loss in the stocks

def generate_profit_loss(self):

  df = pd.read_csv(csv_file)

  bse = BSE()

  stock_data = bse.getScripCodes()

  log_data = []

  # For making the log file for saving the data into log file

  logging.basicConfig(filename='profit_loss.log', level=logging.INFO, format='%(message)s')

  total_purchase_amount = 0

  total_current_amount = 0

  for index, row in df.iterrows():

    company_name = row['Company Name']

    rate_per_share = row['Rate per Share']

    quantity = row['Quantity']

    if pd.isna(quantity):

      logging.error(f"Invalid quantity value for company: {company_name}. Please check you CSV File")

    stock_code = get_stock_code(company_name, stock_data)

    if stock_code is None:

      logging.error(f'Stock code not found for company: {company_name}. Please check you csv file')

      continue

    current_prices, high_prices, low_prices = get_current_price(stock_code, bse)

    if current_prices is None:

      logging.error(f'Unable to fetch current price of company: {company_name}.')

      continue

    rate_per_share = float(rate_per_share)

    quantity = int(quantity)

    purchase_amount = rate_per_share * quantity

    current_amount = float(current_prices) * quantity

    deviation = current_amount - purchase_amount

    total_purchase_amount += purchase_amount

    total_current_amount += current_amount

    profit_loss_percentage = (deviation / purchase_amount) * 100

    logging.info(f'Company Name: {company_name}\n'

           f'Deviation of Stocks: {deviation:.2f}\n'

           f'Profit/Loss Percentage of Stocks: {profit_loss_percentage:.2f}%\n'

           f'Current Stock Price(LTP): {current_prices}\n'

           f'High Price of Stocks in a Day: {high_prices}\n'

           f'Low Price of Stocks in a Day: {low_prices}\n')

    log_data.append([company_name, deviation, profit_loss_percentage, current_prices, high_prices, low_prices])

  overall_deviation = total_current_amount - total_purchase_amount

  overall_profit_loss_percentage = (overall_deviation / total_purchase_amount) * 100

  logging.info(f'Total Deviation of Stocks: {overall_deviation:.2f}\n'

         f'Total Profit/Loss Percentage of Stocks: {overall_profit_loss_percentage:.2f}%\n')

  print(f'Report file generated successfully. Please check "profit_loss.log" for details.')

  # For exporting the data into excel file

  excel_file = 'log_data_file.xlsx'

  column_names = ['Company Name', 'Deviation of Stocks', 'Profit/Loss Percentage', 'Current Stock Price(LTP)',

          'High Price', 'Low Price']

  df_export = pd.DataFrame(log_data, columns=column_names)

  df_export.to_excel(excel_file, index=False)

  print(f'Report file generated successfully. Please check "{excel_file}" for details.')

  # For inserting the data in Database

  for data in log_data:

    document = {

      'Company Name': data[0],

      'Deviation of Stocks': data[1],

      'Profit/Loss Percentage': data[2],

      'Current Stock Price(LTP)': data[3],

      'High Price': data[4],

      'Low Price': data[5]

    }

  records.insert_one(document)

  sender_email_id = ''

  password = ''

  receiver_email_id = input("Enter the receiver mail ID here: ")

  names = input("Enter the receiver name: ")

  subject = "File of BSE API Data"

  body = f"Dear {names}, \n \t I have sent you an excel file of BSE API data. " \

       f"\n\nThanks and Regards \nParkar Digital \n5th Floor, C-Wing, Manikchand Ikon,\nBund Garden," \

       f"Dhole Patil Road,\nPune Maharashtra, 411001."

  attachment_filename = 'log_data_file.xlsx'

  send_email(sender_email_id, password, receiver_email_id, names, subject, body, attachment_filename)

# Database connection

db = connect_to_database()

records = db.stocks_records

document_count = records.count_documents({})

print("Number of documents:", document_count)

# For importing the data from .csv file

csv_file = 'portfolio.csv'

generate_profit_loss(csv_file)











import configparser
config = configparser.ConfigParser()

config.read('config.ini')



# Database Configuration

database = config['DATABASE']

username = database['Username']

password = database['Password']

cluster_url = database['ClusterURL']

database_name = database['DatabaseName']








import configparser

from pymongo import MongoClient

from urllib.parse import quote_plus





def get_database_connection():

  config = configparser.ConfigParser()

  config.read('config.ini')



  username = config.get('database', 'username')

  password = config.get('database', 'password')

  cluster_url = config.get('database', 'cluster_url')

  database_name = config.get('database', 'database_name')



  escaped_username = quote_plus(username)

  escaped_password = quote_plus(password)

  url = f"mongodb+srv://{escaped_username}:{escaped_password}@{cluster_url}/{database_name}?retryWrites=true&w=majority"



  client = MongoClient(url)

  db = client.get_database(database_name)

  return db





def insert_records(records):

  db = get_database_connection()

  collection = db.stocks_records

  collection.insert_many(records)





def retrieve_records():

  db = get_database_connection()

  collection = db.stocks_records

  records = collection.find()

  return list(records)















import configparser

from pymongo import MongoClient

from urllib.parse import quote_plus



def connect_to_database():

  config = configparser.ConfigParser()

  config.read('config.ini')



  username = config.get('database', 'username')

  password = config.get('database', 'password')

  cluster_url = config.get('database', 'cluster_url')

  database_name = config.get('database', 'database_name')



  escaped_username = quote_plus(username)

  escaped_password = quote_plus(password)



  url = f"mongodb+srv://{escaped_username}:{escaped_password}@{cluster_url}/{database_name}?retryWrites=true&w=majority"

  client = MongoClient(url)

  db = client.get_database(database_name)



  return db



























from mail import send_email

import smtplib

import ssl

from email import encoders

from email.mime.base import MIMEBase

from email.mime.multipart import MIMEMultipart

from email.mime.text import MIMEText

# Mail Configuration

mail_config = config['MAIL']

sender_email_id = mail_config['SenderEmailID']

password = mail_config['Password']